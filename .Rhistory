pcap_hc_charges_08 = charges_08 / num_pat_08,
pcap_hc_charges_09 = charges_09 / num_pat_09,
pcap_hc_charges_10 = charges_10 / num_pat_10,
pcap_hc_charges_tot = tot_charges / tot_pats,
num_high_utils_08,
num_high_utils_09,
num_high_utils_10
)
CMS_patient <- CMS_patient[, c(1, 2, 3, 21, 4, 5, 22, 6, 7, 23, 8, 9, 24, 10, 11, 25, 12, 13, 26, 14, 15, 27, 16, 17, 28, 18, 19, 20)]
data <- left_join(data, CMS_patient, by = c("ctuniq" = "CT2000_unique"))
# pluto2007_ctuniq <- fread("data/pluto2007_ctuniq.csv")
# [Preprocessing of PLUTO data] ----
#   Select PLUTO data by building types
# str(pluto2007_ctuniq)
#   Building of Interest
BOI <- c("I1", "I3", "I5", "I6", "I7", "K1", "K2", "K3", "K4", "K5", "K6", "P5", "P8", "M1")
# pluto_bldCT <- pluto2007_ctuniq %>%
#   select(ctuniq,
#          xcoord,
#          ycoord,
#          lot,
#          bldgclass,
#          borocode,
#          borough) %>%
#   filter(bldgclass %in% BOI)
# write.csv(pluto_bldCT, "pluto_bldCT.csv")
pluto_bldCT <- fread("data/pluto_bldCT.csv")
#   Give id to each row
pluto_bldCT$id <- rownames(pluto_bldCT)
pluto_bldCT %>% arrange(ctuniq, bldgclass)
head(pluto_bldCT, 20)
pluto_bldCT_summary <- pluto_bldCT %>%
group_by(ctuniq, bldgclass) %>%
summarise(count = n())
# [Create building varnames] ----
buildingVarnames <- list(
I1 = "HOSPITAL",
I3 = "PHARMACY",
I5 = "CLINIC",
I6 = "NURSINGHOME",
I7 = "ADULTFACILITY",
K1 = "ONESTORYSTORE",
K2 = "TWOSTORYSTORE",
K3 = "DEPTSTORE",
K4 = "STOREW_APTMNT",
K5 = "DINERS",
K6 = "SHOPPINGCNTR",
K = "STORES",
P5 = "CMTYCNTR",
P8 = "LIBRARY",
M1 = "CHURCHSYN"
)
# [Create PLUTO data columns for ABM data] ----
head(pluto_bldCT_summary)
pluto_bldCT_summary %>% arrange(ctuniq)
bldCount <- data.frame(acast(pluto_bldCT_summary, ctuniq ~ bldgclass))
bldCount[is.na(bldCount)] <- 0
bldCount$K <- bldCount$K1 + bldCount$K2 + bldCount$K3 + bldCount$K4 + bldCount$K5 + bldCount$K6
colnames(bldCount) <- unlist(buildingVarnames[colnames(bldCount)], use.names = F)
bldCount$ctuniq <- rownames(bldCount)
rownames(bldCount) <- 1:nrow(bldCount)
head(bldCount)
head(data)
ABM_PLUTO <- full_join(data, bldCount, by = "ctuniq")
head(ABM_PLUTO, 20)
dim(data)
dim(bldCount)
dim(ABM_PLUTO)
write.csv(ABM_PLUTO, "ABM_PLUTO.csv")
pluto_bldCT[200:210, ]
pluto_bldCT[is.na(pluto_bldCT$xcoord), ]
#   Project coordinates of buildings into ny.map coordinate system
pluto_bldCT_coords <- pluto_bldCT %>% dplyr::select(id, xcoord, ycoord)
pluto_bldCT_coords <- pluto_bldCT_coords[complete.cases(pluto_bldCT_coords), ]
head(pluto_bldCT_coords, 20)
dim(pluto_bldCT_coords)
coordinates(pluto_bldCT_coords) <- ~xcoord + ycoord
proj4string(pluto_bldCT_coords) <- ct2000shp@proj4string
pluto_bldCT_coords <- spTransform(pluto_bldCT_coords, ny.map@proj4string)
head(pluto_bldCT_coords@coords)
pluto_bldCT_coords <- data.frame(id = pluto_bldCT_coords$id,
x = pluto_bldCT_coords@coords[, 1],
y = pluto_bldCT_coords@coords[, 2])
head(pluto_bldCT_coords)
pluto_bldCT <- left_join(pluto_bldCT, pluto_bldCT_coords, by = "id") %>% dplyr::select(-xcoord, -ycoord)
head(pluto_bldCT, 20)
#   Project coordinates of other shape data
ct2000shp <- spTransform(ct2000shp, ny.map@proj4string)
head(ct2000shp@polygons[1])
boros <- spTransform(boros, ny.map@proj4string)
nypp <- spTransform(nypp, ny.map@proj4string)
# [Desciption of attributes] ----
beginRow <- 6
endCol <- 4
varNames <- as.character(varDef$varName[beginRow:nrow(varDef) - 1])
varShortNames <- as.character(varDef$varShortName[beginRow:nrow(varDef) - 1])
showPercentage <- varDef$showPercentage[beginRow:nrow(varDef) - 1]
varDefinitions <- varDef$varFullDefinition[beginRow:nrow(varDef) - 1]
checkboxGroupListIndex <- setNames(as.list(c(1:length(varNames))), varNames)
checkboxGroupList <- setNames(as.list(as.character(varNames)), as.character(varShortNames))
shapeDataList <- setNames(as.list(c("CT", "NB")), c("Census Tract Map", "Neighborhood Map"))
varColors <- rainbow_hcl(length(varNames), c = 190, l = 60, start = 12, end = 300)
# ShowColors(varColors)
# varColors <- terrain.colors(length(varNames))
# varColors <- cm.colors(length(varNames))
# varColors <- rainbow_hcl(length(varNames), start = 60, end = 240)
# varColors <- diverge_hcl(length(varNames),
#                          h = c(800, 300), c = 100, l = c(20, 130), power = 0.4)
# ShowColors(varColors)
# [Prepare precinct shape data] ----
nypp@data$id <- rownames(nypp@data)
f_nypp <- fortify(nypp, polyname = "Precinct")
nypp_DF <- merge(f_nypp, nypp@data, by = "id")
# [Prepare Boros shape data] ----
#   add to data a new column termed "id" composed of the rownames of data
#   create a data.frame from our spatial object
#   merge the "fortified" data with the data from our spatial object
#   aggregate to an upper level
#   offset the label
boros@data$id <- rownames(boros@data)
f_boros <- fortify(boros, polyname = "BoroCode")
boros_DF <- merge(f_boros, boros@data, by = "id")
bnames <- aggregate(data = boros_DF, cbind(long,lat) ~ BoroName, FUN=function(x) mean(range(x)))
# bnames[4,3] <- 200741.5
bnames$BoroName <- as.character(bnames$BoroName)
bnames$BoroName <- as.factor(bnames$BoroName)
# [Prepare ct shape data] ----
#   add to data a new column termed "id" composed of the rownames of data'
#   create a data.frame from our spatial object
#   merge the "fortified" data with the data from our spatial object
ct2000shp@data$id <- rownames(ct2000shp@data)
f_ct2000shp <- fortify(ct2000shp, polyname = "BoroCT2000")
ct2000shp_DF <- merge(f_ct2000shp, ct2000shp@data, by = "id")
# [Prepare ny neighborhood shape data, <by Brooke>] ----
#   project the dataframe onto the shape file
#   add to data a new column termed "id" composed of the rownames of data
#   create a data.frame from our spatial object
#   merge the "fortified" data with the data from our spatial object
sodo <- ny.map[ny.map$City == "New York", ]
dat <- data.frame(Longitude = data$ctrdlong, Latitude = data$ctrdlat)
coordinates(dat) <- ~ Longitude + Latitude
proj4string(dat) <- proj4string(sodo)
location = over(dat, sodo)
data = cbind(data, location)
dataProjected <- sodo
dataProjected@data$id <- rownames(dataProjected@data)
watershedPoints <- fortify(dataProjected, region = "id")
watershedDF <- merge(watershedPoints, dataProjected@data, by = "id")
# [Prepare useful data] ----
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# ==== Add new variable into CT layer:
#       1) Add variable description in "Varialbe_Definitions.csv" !!csv file!!
#       2) Add a correspoding column to "data_vars", whose name should be consistent with the varName in "Varialbe_Definitions.csv"
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
data_ids <- data %>% dplyr::select(BoroCT2000, Name)
data_vars <- data %>% dplyr::select(popdens:propnonw, offpcap:num_high_utils_10)
data_coords <- data[, c("ctrdlong", "ctrdlat")]
data_necessary <- cbind(data_ids, data_vars, data_coords)
# --- For CT
uCT <- data_necessary %>%
group_by(BoroCT2000) %>%
summarise_all(funs(mean))
ct2000shp_DF$BoroCT2000 <- as.character(ct2000shp_DF$BoroCT2000)
uCT$BoroCT2000 <- as.character(uCT$BoroCT2000)
dfCT <- dplyr::left_join(ct2000shp_DF, uCT, by = "BoroCT2000")
#   --- Find center of view
center_ct.map <- ct2000shp_DF %>%
dplyr::select(long, lat) %>%
summarise(ctrlong = mean(long), ctrlat = mean(lat))
center_ct.map # -73.91271 40.69984
#   --- Combine shapefile with data
ct2000shp_attr <- ct2000shp
ct2000shp_attr@data <- dplyr::left_join(ct2000shp_attr@data, uCT, by = "BoroCT2000")
head(ct2000shp_attr@data)
# --- For NB
uNB <- data_necessary %>%
group_by(Name) %>%
summarise_all(funs(mean))
dfNB <- dplyr::left_join(watershedDF, uNB, by = "Name")
#   --- Find center of view
center_ny.map <- watershedDF %>%
dplyr::select(long, lat) %>%
summarise(ctrlong = mean(long), ctrlat = mean(lat))
center_ny.map # -73.92194 40.68922
#   --- Combine shapefile with data
ny.map_attr <- ny.map
ny.map_attr@data <- dplyr::left_join(ny.map_attr@data, uNB, by = "Name")
data_necessary$BoroCT2000 <- as.character(data_necessary$BoroCT2000)
NBname_CTntaname <- full_join(data_necessary, ct2000shp_DF, by = "BoroCT2000")
NBname_CTntaname <- NBname_CTntaname %>%
distinct(Name, NTANAme) %>%
arrange(Name)
NBname_CTntaname <- aggregate(NTANAme ~ Name, data = NBname_CTntaname,
FUN = paste0, collapse = "<br/>")
ny.map_attr@data <- left_join(ny.map_attr@data, NBname_CTntaname, by = "Name")
# --- For Boro
data_necessary_Boro <- cbind(data_necessary, borocodenum = data$borocodenum)
tbl_df(data_necessary_Boro)
data_necessary_Boro[is.na(data_necessary_Boro)] <- 0
uBR <- data_necessary_Boro %>%
group_by(borocodenum) %>%
summarise_all(funs(mean))
head(uBR)
dfBR <- dplyr::left_join(boros_DF, uBR, by = c("BoroCode" = "borocodenum"))
#   --- Combine shapefile with data
boros_attr <- boros
boros_attr@data <- dplyr::left_join(boros_attr@data, uBR, by = c("BoroCode" = "borocodenum"))
# --- For Precinct
data_precinct[is.na(data_precinct)]
uPP <- data_precinct %>%
group_by(precinct) %>%
summarise_all(funs(mean))
head(uPP)
dfPP <- dplyr::left_join(nypp_DF, uPP, by = c("Precinct" = "precinct"))
#   --- Combine shapefile with data
nypp_attr <- nypp
nypp_attr@data <- dplyr::left_join(nypp_attr@data, uPP, by = c("Precinct" = "precinct"))
CTname <- dfCT %>% dplyr::select(BoroCT2000, NTANAme)
data_precinct2$BoroCT2000 <- as.character(data_precinct2$BoroCT2000)
CTname$BoroCT2000 <- as.character(CTname$BoroCT2000)
Precinct_CTntaname <- full_join(data_precinct2, CTname, by = "BoroCT2000")
Precinct_CTntaname <- Precinct_CTntaname %>%
distinct(precinct, NTANAme) %>%
arrange(precinct)
head(Precinct_CTntaname, 20)
Precinct_CTntaname_aggr <- aggregate(NTANAme ~ precinct, data = Precinct_CTntaname,
FUN = paste0, collapse = "<br/>")
head(Precinct_CTntaname_aggr, 20)
nypp_attr@data <- left_join(nypp_attr@data, Precinct_CTntaname_aggr,
by = c("Precinct" = "precinct"))
#   --- Prepare precinct data for plot
precinct_varValues <- nypp_attr$offpcap
precinct_labels <- sprintf("<strong>Precinct %s</strong><br/><b><u>Major offense per capita:</u></b> %g<br/>",
nypp_attr@data$Precinct, signif(precinct_varValues, 4))
precinct_labels <- paste0(precinct_labels, "<strong>CTs:</strong><br/>", nypp_attr@data$NTANAme)
precinct_labels <- lapply(precinct_labels, HTML)
intervals <- c(0.015, 0.020, 0.025, 0.030, 0.035, 0.065, 0.1, 0.2, 0.5, 1, 5)
intervalsA <- c(0, intervals[1:length(intervals)-1])
intervalsB <- c(intervals)
intervalLable <- paste0(sprintf("%.3f", intervalsA),
" - ",
sprintf("%.3f", intervalsB))
intervalLable <- c(intervalLable, paste0(" > ", sprintf("%.3f", intervals[length(intervals)])), "NA")
colfunc <- colorRampPalette(c("white", "red"))
colors <- colfunc(length(intervals) + 1)
colors <- c(colors, "#000000")
precinct_pal <- GetColorPalByBins(precinct_varValues, intervals, "red")
precinct_groupName <- "Percapita offense"
boro_groupName <- "Boros"
# --- For PLUTO data
greenLeafIcon <- makeIcon(
iconUrl = "http://leafletjs.com/examples/custom-icons/leaf-green.png",
iconWidth = 38, iconHeight = 95,
iconAnchorX = 22, iconAnchorY = 94,
shadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
shadowWidth = 50, shadowHeight = 64,
shadowAnchorX = 4, shadowAnchorY = 62
)
# For all kinds of buildings, refer to https://stackoverflow.com/questions/46286599/custom-markers-on-shiny-leaflet-map
# I1icon <- rsvg("data/icons/I1.svg")
# dim(I1icon)
# rsvg_png("data/icons/I1.svg", "data/icons/I1.png")
# [Load icons] ----
buildingIcons <- iconList(
I1 = GetIcon("I1"),
I3 = GetIcon("I3"),
I5 = GetIcon("I5"),
I6 = GetIcon("I6"),
I7 = GetIcon("I7"),
K1 = GetIcon("K1", 12),
K2 = GetIcon("K2"),
K3 = GetIcon("K3"),
K4 = GetIcon("K4"),
K5 = GetIcon("K5"),
K6 = GetIcon("K6"),
P5 = GetIcon("P5"),
P8 = GetIcon("P8"),
M1 = GetIcon("M1")
)
# [Create building labels] ----
buildingLabels <- list(
I1 = "Hospital",
I3 = "Dispensary",
I5 = "Clinic",
I6 = "Nursing Home",
I7 = "Adult Facility",
K1 = "One Story Store",
K2 = "Two Story, Store & Office",
K3 = "Department Stores, Multi-Story",
K4 = "Stores, Apartment Above",
K5 = "Diners, Franchised Type Stand",
K6 = "Shopping Centers with Parking",
P5 = "Community Center",
P8 = "Library",
M1 = "Church"
)
unlist(buildingLabels["I1"], use.names = FALSE)
uniqueBuildingLabel <- data.frame(buildingLabel = unlist(buildingLabels, use.names = FALSE))
uniqueBuildingLabel <- uniqueBuildingLabel %>% distinct(buildingLabel)
uniqueBuildingLabel <- as.character(uniqueBuildingLabel[, 1])
pluto_bldCT_tmp <- pluto_bldCT %>% filter(bldgclass == "I3")
# --- For NPI data
head(NPIData)
NPI_majorOrganization <- NPIData %>%
group_by(organization_name.legal_business_name.) %>%
summarise(count = n()) %>%
arrange(desc(count))
NPI_majorOrganization <- NPI_majorOrganization[-1, ]
colnames(NPI_majorOrganization) <- c("organization", "count")
head(NPI_majorOrganization, 20)
dim(NPI_majorOrganization)
organization_fullName <- NPI_majorOrganization$organization
organization_fullName_20 <- NPI_majorOrganization$organization[1:20]
organization_abbr <- c(
"NYU",
"Montefiore",
"MSSM",
"Weill Cornell"
)
organizationLabels <- list(
)
NPI_tmp <- pluto_bldCT %>% filter(bldgclass == "I3")
# [Necessary Datasets] ----
# uCT
# uNB
# ct2000shp_attr
# ny.map_attr
# varDef
# pluto_bldCT
head(pluto_bldCT)
head(NPI_majorOrganization, 20)
head(NPIData)
NPIData
head(pluto_bldCT)
NPI_organization <- NPIData %>% select(ctuniq, organization_name.legal_business_name., interpolated_latitude, interpolated_longitude)
head(NPI_organization)
organization_fullName_20
colnames(NPI_organization) <- c("ctuniq", "organization", "lat", "long")
head(NPI_organization)
orgName <- "NEW YORK UNIVERSITY"
orgName
NPI_organization_tmp <- NPI_organization %>%
filter(organization == orgName)
NPI_organization_tmp <- NPI_organization %>%
filter(organization == orgName)
NPI_organization_tmp
runApp()
runApp()
organization_fullName_20
organization_fullName <- as.character(NPI_majorOrganization$organization)
organization_fullName_20 <- organization_fullName[1:20]
organization_fullName_20
runApp()
organization_fullName
install.packages("stringdist")
library(stringdist)
?agrep
organization_fullName_20
agrep(organization_fullName_20[4], organization_fullName_20, value=T)
sapply(organization_fullName_20, function(x) {
agrep(x, organization_fullName_20, value=T)
})
nameNum <- 30
sapply(organization_fullName[1:nameNum], function(x) {
agrep(x, organization_fullName[1:nameNum], value=T)
})
orgNameMatching <-  sapply(organization_fullName[1:nameNum], function(x) {
agrep(x, organization_fullName[1:nameNum], value=T)
})
length(orgNameMatching)
?length
orgNameMatchingLen <- lapply(orgNameMatching, length)
orgNameMatchingLen
orgNameMatchingLen <- sapply(orgNameMatching, length)
orgNameMatchingLen
orgNameMatchingInfo <- data.frame(id = 1:length(orgNameMatchingLen), orgNameMatchingLen = orgNameMatchingLen)
orgNameMatchingInfo
orgNameMatchingInfo$orgName <- rownames(orgNameMatchingInfo)
orgNameMatchingInfo
rownames(orgNameMatchingInfo) <- orgNameMatchingInfo$id
orgNameMatchingInfo
orgNameMatchingInfo <- orgNameMatchingInfo[, -1]
orgNameMatchingInfo
orgNameMatchingInfo <- orgNameMatchingInfo %>% filter(orgNameMatchingLen > 1)
orgNameMatchingInfo
orgNameMatchingLen <- sapply(orgNameMatching, length)
orgNameMatchingInfo <- data.frame(id = 1:length(orgNameMatchingLen), orgNameMatchingLen = orgNameMatchingLen)
orgNameMatchingInfo$orgName <- rownames(orgNameMatchingInfo)
rownames(orgNameMatchingInfo) <- orgNameMatchingInfo$id
orgNameMatchingInfo <- orgNameMatchingInfo %>% filter(orgNameMatchingLen > 1)
orgNameMatchingInfo
orgNameCombIdx <- orgNameMatchingInfo$id
orgNameMatching[orgNameCombIdx]
runApp()
runApp()
orgNameMatching[orgNameCombIdx]
for orgNameGroup in orgNameMatching[orgNameCombIdx] {
cat(orgNameGroup, '\n')
}
for (orgNameGroup in orgNameMatching[orgNameCombIdx]) {
cat(orgNameGroup, '\n')
}
orgNameMatchingMto1 <- orgNameMatching[orgNameCombIdx]
length(orgNameMatchingMto1)
i <- 1
orgNameMatchingMto1 <- orgNameMatching[orgNameCombIdx]
orgNameMatchingMto1[i]
orgNameMatchingMto1[i]$`NEW YORK UNIVERSITY`
unlist(orgNameMatchingMto1[i])
unlist(orgNameMatchingMto1[i], use.names = F)
orgNameMatchingMto1[[i]]
orgNameMatchingMto1[[2]]
organization_fullName
orgNameMatchingMto1[[i]][1]
for (i in 1:length(orgNameMatchingMto1)) {
for (j in orgNameMatchingMto1[[i]]) {
organization_fullName[which(organization_fullName == j)] <- orgNameMatchingMto1[[i]][1]
}
}
organization_fullName[1:nameNum]
orgNameMatchingMto1
?agrep
orgNameMatching <- sapply(organization_fullName[1:nameNum], function(x) {
agrep(x, organization_fullName[1:nameNum], max.distance = 0.05, value=T)
})
orgNameMatchingLen <- sapply(orgNameMatching, length)
orgNameMatchingInfo <- data.frame(id = 1:length(orgNameMatchingLen), orgNameMatchingLen = orgNameMatchingLen)
orgNameMatchingInfo$orgName <- rownames(orgNameMatchingInfo)
rownames(orgNameMatchingInfo) <- orgNameMatchingInfo$id
orgNameMatchingInfo <- orgNameMatchingInfo %>% filter(orgNameMatchingLen > 1)
orgNameCombIdx <- orgNameMatchingInfo$id
orgNameMatchingMto1 <- orgNameMatching[orgNameCombIdx]
orgNameMatchingMto1
organization_fullName <- as.character(NPI_majorOrganization$organization)
# --- --- Fuzzy name matching
nameNum <- 30
orgNameMatching <- sapply(organization_fullName[1:nameNum], function(x) {
agrep(x, organization_fullName[1:nameNum], max.distance = 0.05, value=T)
})
orgNameMatchingLen <- sapply(orgNameMatching, length)
orgNameMatchingInfo <- data.frame(id = 1:length(orgNameMatchingLen), orgNameMatchingLen = orgNameMatchingLen)
orgNameMatchingInfo$orgName <- rownames(orgNameMatchingInfo)
rownames(orgNameMatchingInfo) <- orgNameMatchingInfo$id
orgNameMatchingInfo <- orgNameMatchingInfo %>% filter(orgNameMatchingLen > 1)
orgNameCombIdx <- orgNameMatchingInfo$id
orgNameMatchingMto1 <- orgNameMatching[orgNameCombIdx]
orgNameMatchingMto1
nameNum <- length(organization_fullName)
orgNameMatching <- sapply(organization_fullName[1:nameNum], function(x) {
agrep(x, organization_fullName[1:nameNum], max.distance = 0.05, value=T)
})
orgNameMatchingLen <- sapply(orgNameMatching, length)
orgNameMatchingInfo <- data.frame(id = 1:length(orgNameMatchingLen), orgNameMatchingLen = orgNameMatchingLen)
orgNameMatchingInfo$orgName <- rownames(orgNameMatchingInfo)
rownames(orgNameMatchingInfo) <- orgNameMatchingInfo$id
orgNameMatchingInfo <- orgNameMatchingInfo %>% filter(orgNameMatchingLen > 1)
orgNameCombIdx <- orgNameMatchingInfo$id
orgNameMatchingMto1 <- orgNameMatching[orgNameCombIdx]
for (i in 1:length(orgNameMatchingMto1)) {
for (j in orgNameMatchingMto1[[i]]) {
organization_fullName[which(organization_fullName == j)] <- orgNameMatchingMto1[[i]][1]
}
}
write.csv(organization_fullName, "organization_fullName.csv")
organization_fullName
head(organization_fullName)
head(organization_fullName, 20)
organization_fullName_original <- as.character(NPI_majorOrganization$organization)
orgNameCompare <- data.frame(before = organization_fullName_original, after = organization_fullName)
head(orgNameCompare, 20)
head(orgNameCompare, 20)
organization_fullName <- as.character(NPI_majorOrganization$organization)
nameNum <- length(organization_fullName)
nameNum <- 30
orgNameMatching <- sapply(organization_fullName[1:nameNum], function(x) {
agrep(x, organization_fullName[1:nameNum], max.distance = 0.05, value=T)
})
orgNameMatchingLen <- sapply(orgNameMatching, length)
orgNameMatchingInfo <- data.frame(id = 1:length(orgNameMatchingLen), orgNameMatchingLen = orgNameMatchingLen)
orgNameMatchingInfo$orgName <- rownames(orgNameMatchingInfo)
rownames(orgNameMatchingInfo) <- orgNameMatchingInfo$id
orgNameMatchingInfo <- orgNameMatchingInfo %>% filter(orgNameMatchingLen > 1)
orgNameCombIdx <- orgNameMatchingInfo$id
orgNameMatchingMto1 <- orgNameMatching[orgNameCombIdx]
for (i in 1:length(orgNameMatchingMto1)) {
for (j in orgNameMatchingMto1[[i]]) {
organization_fullName[which(organization_fullName == j)] <- orgNameMatchingMto1[[i]][1]
}
}
write.csv(organization_fullName, "organization_fullName.csv")
orgNameCompare <- data.frame(before = organization_fullName_original, after = organization_fullName)
head(orgNameCompare, 20)
NPI_organization
NPI_majorOrganization
head(NPI_majorOrganization, 20)
head(NPI_majorOrganization, 50)
?ggplot
ggplot(NPI_majorOrganization) +
geom_point(aes(x = rownames(NPI_majorOrganization),
y = count))
class(NPI_majorOrganization$count)
?geom_bar
mpg
ggplot(NPI_majorOrganization) +
geom_bar(aes(organization))
ggplot(NPIData, aes(organization_name.legal_business_name.))
head(NPI_majorOrganization, 50)
NPI_majorOrganization_plot <- data.frame(id = rownames(NPI_majorOrganization), count = NPI_majorOrganization$count)
ggplot(NPI_majorOrganization_plot) +
geom_point(aes(x = id, y = count))
head(NPI_majorOrganization_plot, 20)
as
