shiny::runApp('Dropbox/Study/GitHub/VNSNY-UPENN-ABMS-Study-R-Map')
setwd("/Users/yilongju/Dropbox/Study/GitHub/VNSNY-UPENN-ABMS-Study-R-Map")
ct2000shp_attr@data <- read.csv("data/ct2000shp_attr_data.csv")
ct2000shp <- spTransform(ct2000shp, ny.map@proj4string)
# [Load packages] ----
library(rgdal)
library(raster)
library(data.table)
library(shiny)
library(shinyBS)
# library(lazyeval)
library(reshape2)
library(scales)
library(ggmap)
library(Cairo)
library(maptools)
library(rgeos)
library(scales)
library(RColorBrewer)
library(rsconnect)
library(crosstalk)
library(leaflet)
library(OneR)
library(Hmisc)
library(moments)
library(colorspace)
library(classInt)
library(stringdist)
library(ggplot2)
library(dplyr)
Sys.setenv(TZ = "US/Eastern")
# sudo su -   -c "R -e \"install.packages(c('lazyeval', 'reshape2', 'scales', 'ggmap', 'Cairo', 'maptools', 'rgeos', 'scales', 'RColorBrewer', 'rsconnect', 'plotly', 'crosstalk', 'doParallel', 'leaflet', 'OneR', 'Hmisc', 'moments', 'colorspace', 'classInt', 'data.table'), repos='http://cran.rstudio.com/')\""
# sudo su -   -c "R -e \"install.packages('Cairo', repos='http://cran.rstudio.com/')\""
# sudo su -   -c "R -e \"install.packages('log4r', repos='http://cran.rstudio.com/')\""
# libgtk2.0-dev libcairo2-dev xvfb xauth xfonts-base
# library(rsvg)
# author: "Yilong", "Brooke"
# date: [21 Sep, 2017]
# [Function Declarations] ----
GetBinforVar <- function(data, varName, nbins = 6) {
# data <- uCT
# varName <- "subacc"
# varName <- "propoa"
numericValues <- unlist(c(data[, varName]), use.names = FALSE)
nbins_t = nbins
l <- 0
iter = 0
while (l < nbins && iter < 20) {
bins <- cut2(x = numericValues, g = nbins_t,
levels.mean = T, onlycuts = T, digits = 2)
l <- length(bins)
nbins_t <- nbins_t + 1
iter <- iter + 1
}
bins <- signif(bins, 3)
return(bins)
}
GetRadius <- function(varValue, l = 2, u = 32, cap = Inf) {
if (cap != Inf) {
varValue[which(varValue >= cap)] <- max(varValue[which(varValue < cap)],
na.rm = T)
}
range <- range(varValue, na.rm = TRUE)
varValue <- (varValue - range[1])/(range[2] - range[1]) * (u - l) + l
return(varValue)
}
ShowColors <- function(col, border = "light gray", ...) {
n <- length(col)
plot(0, 0, type="n", xlim = c(0, 1), ylim = c(0, 1),
axes = FALSE, xlab = "", ylab = "")
rect(0:(n-1)/n, 0, 1:n/n, 1, col = col, border = border)
}
# Covert real number vector to percentage vector
NumToPercentage <- function(numVec) {
PercVec <- paste0(round(100 * numVec, 2), "%")
return(PercVec)
}
GetColorPalByBins <- function(varValues, intervals, color1, color2 = "white") {
pal <- function(varValues) {
intervals <- sort(intervals)
colfunc <- colorRampPalette(c(color2, color1))
colors <- colfunc(length(intervals) + 1)
colorDeter <- data.frame(sapply(intervals, function(x) {
x < varValues
}))
varColorIdx <- apply(colorDeter, 1, sum) + 1
varColors <- colors[varColorIdx]
varColors[is.na(varColors)] <- "#000000"
return(varColors)
}
return(pal)
}
GetIcon <- function(iconFilename, width = NULL, height = NULL, iconFileLoc = "data/icons/", iconFileType = "png") {
iconSize <- 16
if (is.null(width)) {
width <- iconSize
}
if (is.null(height)) {
height <- width
}
iconFilePath <- paste0(iconFileLoc, iconFilename, ".", iconFileType)
return (makeIcon(
iconUrl = iconFilePath,
iconWidth = width,
iconHeight = height))
}
# [Read data] ----
# setwd("/Users/yilongju/Dropbox/Study/GitHub/VNSNY-UPENN-ABMS-Study-R-Map")
debugMode <- F
data <- read.csv("data/ABM_censustract_precinct_111617.csv")
names(data)[2] <- "BoroCT2000"
data <- data[order(data$BoroCT2000),]
data <- data[-1973, ]
# data_precinct <- data %>% dplyr::select(precpop:offpcap)
# data_precinct2 <- data %>% dplyr::select(BoroCT2000, precpop:offpcap)
varDef <- read.csv("data/Variable_Definitions.csv")
ct2000shp <- shapefile("data/nyct2000_12c/nyct2000_12c/nyct2000")
boros <- readOGR("data/nybb_16a/nybb.shp")
ny.map <- readOGR("data/ZillowNeighborhoods-NY/ZillowNeighborhoods-NY.shp")
nypp <- readOGR("data/nypp_17c_police_precinct_shapefile/nypp.shp")
NPIData <- read.csv("NPI_ctuniq.csv", row.names = 1)
CMS_patient <- read.csv("data/CMS_patient.csv", row.names = 1)
CMS_patient[CMS_patient == -100] <- NA
CMS_patient <- CMS_patient %>% mutate(
pcap_er_charges_08 = er_charges_08 / num_er_08,
pcap_er_charges_09 = er_charges_09 / num_er_09,
pcap_er_charges_10 = er_charges_10 / num_er_10,
pcap_er_charges_tot = tot_er_charges / tot_er_pats,
pcap_hc_charges_08 = charges_08 / num_pat_08,
pcap_hc_charges_09 = charges_09 / num_pat_09,
pcap_hc_charges_10 = charges_10 / num_pat_10,
pcap_hc_charges_tot = tot_charges / tot_pats,
num_high_utils_08,
num_high_utils_09,
num_high_utils_10
)
CMS_patient <- CMS_patient[, c(1, 2, 3, 21, 4, 5, 22, 6, 7, 23, 8, 9, 24, 10, 11, 25, 12, 13, 26, 14, 15, 27, 16, 17, 28, 18, 19, 20)]
data <- left_join(data, CMS_patient, by = c("ctuniq" = "CT2000_unique"))
# pluto2007_ctuniq <- fread("data/pluto2007_ctuniq.csv")
# [Preprocessing of PLUTO data] ----
#   Select PLUTO data by building types
# str(pluto2007_ctuniq)
#   Building of Interest
BOI <- c("I1", "I3", "I5", "I6", "I7", "K1", "K2", "K3", "K4", "K5", "K6", "P5", "P8", "M1")
# pluto_bldCT <- pluto2007_ctuniq %>%
#   select(ctuniq,
#          xcoord,
#          ycoord,
#          lot,
#          bldgclass,
#          borocode,
#          borough) %>%
#   filter(bldgclass %in% BOI)
# write.csv(pluto_bldCT, "pluto_bldCT.csv")
pluto_bldCT <- fread("data/pluto_bldCT.csv")
#   Give id to each row
pluto_bldCT$id <- rownames(pluto_bldCT)
# pluto_bldCT_summary <- pluto_bldCT %>%
#   group_by(ctuniq, bldgclass) %>%
#   summarise(count = n())
# [Create building varnames] ----
buildingVarnames <- list(
I1 = "HOSPITAL",
I3 = "PHARMACY",
I5 = "CLINIC",
I6 = "NURSINGHOME",
I7 = "ADULTFACILITY",
K1 = "ONESTORYSTORE",
K2 = "TWOSTORYSTORE",
K3 = "DEPTSTORE",
K4 = "STOREW_APTMNT",
K5 = "DINERS",
K6 = "SHOPPINGCNTR",
K = "STORES",
P5 = "CMTYCNTR",
P8 = "LIBRARY",
M1 = "CHURCHSYN"
)
# [Create PLUTO data columns for ABM data] ----
# bldCount <- data.frame(acast(pluto_bldCT_summary, ctuniq ~ bldgclass))
# bldCount[is.na(bldCount)] <- 0
#
# bldCount$K <- bldCount$K1 + bldCount$K2 + bldCount$K3 + bldCount$K4 + bldCount$K5 + bldCount$K6
# colnames(bldCount) <- unlist(buildingVarnames[colnames(bldCount)], use.names = F)
# bldCount$ctuniq <- rownames(bldCount)
# rownames(bldCount) <- 1:nrow(bldCount)
#
# ABM_PLUTO <- full_join(data, bldCount, by = "ctuniq")
# write.csv(ABM_PLUTO, "ABM_PLUTO.csv")
if (debugMode) cat("*************** 1 ***************")
#   Project coordinates of buildings into ny.map coordinate system
# pluto_bldCT_coords <- pluto_bldCT %>% dplyr::select(id, xcoord, ycoord)
# pluto_bldCT_coords <- pluto_bldCT_coords[complete.cases(pluto_bldCT_coords), ]
# coordinates(pluto_bldCT_coords) <- ~xcoord + ycoord
# proj4string(pluto_bldCT_coords) <- ct2000shp@proj4string
# pluto_bldCT_coords <- spTransform(pluto_bldCT_coords, ny.map@proj4string)
# pluto_bldCT_coords <- data.frame(id = pluto_bldCT_coords$id,
#                                  x = pluto_bldCT_coords@coords[, 1],
#                                  y = pluto_bldCT_coords@coords[, 2])
# pluto_bldCT <- left_join(pluto_bldCT, pluto_bldCT_coords, by = "id") %>% dplyr::select(-xcoord, -ycoord)
# write.csv(pluto_bldCT[, -1], "data/pluto_bldCT.csv")
pluto_bldCT <- read.csv("data/pluto_bldCT.csv")
#   Project coordinates of other shape data
ct2000shp <- spTransform(ct2000shp, ny.map@proj4string)
boros <- spTransform(boros, ny.map@proj4string)
nypp <- spTransform(nypp, ny.map@proj4string)
# [Desciption of attributes] ----
beginRow <- 6
endCol <- 4
varNames <- as.character(varDef$varName[beginRow:nrow(varDef) - 1])
varShortNames <- as.character(varDef$varShortName[beginRow:nrow(varDef) - 1])
showPercentage <- varDef$showPercentage[beginRow:nrow(varDef) - 1]
varDefinitions <- varDef$varFullDefinition[beginRow:nrow(varDef) - 1]
checkboxGroupListIndex <- setNames(as.list(c(1:length(varNames))), varNames)
checkboxGroupList <- setNames(as.list(as.character(varNames)), as.character(varShortNames))
shapeDataList <- setNames(as.list(c("CT", "NB")), c("Census Tract Map", "Neighborhood Map"))
varColors <- rainbow_hcl(length(varNames), c = 190, l = 60, start = 12, end = 300)
# ShowColors(varColors)
# varColors <- terrain.colors(length(varNames))
# varColors <- cm.colors(length(varNames))
# varColors <- rainbow_hcl(length(varNames), start = 60, end = 240)
# varColors <- diverge_hcl(length(varNames),
#                          h = c(800, 300), c = 100, l = c(20, 130), power = 0.4)
# ShowColors(varColors)
# [Prepare precinct shape data] ----
nypp@data$id <- rownames(nypp@data)
# f_nypp <- fortify(nypp, polyname = "Precinct")
# nypp_DF <- merge(f_nypp, nypp@data, by = "id")
# if (debugMode) cat("*************** 2 ***************")
# [Prepare Boros shape data] ----
#   add to data a new column termed "id" composed of the rownames of data
#   create a data.frame from our spatial object
#   merge the "fortified" data with the data from our spatial object
#   aggregate to an upper level
#   offset the label
boros@data$id <- rownames(boros@data)
# [Prepare ct shape data] ----
#   add to data a new column termed "id" composed of the rownames of data'
#   create a data.frame from our spatial object
#   merge the "fortified" data with the data from our spatial object
ct2000shp@data$id <- rownames(ct2000shp@data)
# f_ct2000shp <- fortify(ct2000shp, polyname = "BoroCT2000")
# ct2000shp_DF <- merge(f_ct2000shp, ct2000shp@data, by = "id")
# [Prepare ny neighborhood shape data, <by Brooke>] ----
#   project the dataframe onto the shape file
#   add to data a new column termed "id" composed of the rownames of data
#   create a data.frame from our spatial object
#   merge the "fortified" data with the data from our spatial object
# sodo <- ny.map[ny.map$City == "New York", ]
# dat <- data.frame(Longitude = data$ctrdlong, Latitude = data$ctrdlat)
# coordinates(dat) <- ~ Longitude + Latitude
# proj4string(dat) <- proj4string(sodo)
# location <- over(dat, sodo)
# data <- cbind(data, location)
# write.csv(data, "data/data.csv")
data <- read.csv("data/data.csv")
# dataProjected <- sodo
# dataProjected@data$id <- rownames(dataProjected@data)
# watershedPoints <- fortify(dataProjected, region = "id")
# watershedDF <- merge(watershedPoints, dataProjected@data, by = "id")
# [Prepare useful data] ----
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
head(ct2000shp_attr@data)
# write.csv(uCT, "data/uCT.csv")
uCT <- read.csv("data/uCT.csv")
# ct2000shp_DF$BoroCT2000 <- as.character(ct2000shp_DF$BoroCT2000)
# uCT$BoroCT2000 <- as.character(uCT$BoroCT2000)
# dfCT <- dplyr::left_join(ct2000shp_DF, uCT, by = "BoroCT2000")
# #   --- Find center of view
# center_ct.map <- ct2000shp_DF %>%
#   dplyr::select(long, lat) %>%
#   summarise(ctrlong = mean(long), ctrlat = mean(lat))
# center_ct.map # -73.91271 40.69984
# #   --- Combine shapefile with data
ct2000shp_attr <- ct2000shp
# ct2000shp_attr@data <- dplyr::left_join(ct2000shp_attr@data, uCT, by = "BoroCT2000")
# write.csv(ct2000shp_attr@data, "data/ct2000shp_attr_data.csv")
ct2000shp_attr@data <- read.csv("data/ct2000shp_attr_data.csv")
head(ct2000shp_attr@data)
